#!/usr/bin/env node

var Compiler = require('../lib/compiler').Compiler;
var registry = Compiler.compile();
var Util = require('util');
var singleFile = process.env.SINGLE_FILE;

var ByteBuffer = require('bytebuffer');

var buffer = new ByteBuffer(undefined, true);

process.stdin.on("data", function(data) {
  buffer.append(ByteBuffer.wrap(data));
});

process.stdin.on("end", function(){
  buffer.flip();

  var Request  = registry.lookup("google.protobuf.compiler.CodeGeneratorRequest");
  var Response = registry.lookup("google.protobuf.compiler.CodeGeneratorResponse");
  var File     = registry.lookup("google.protobuf.compiler.CodeGeneratorResponse");

  var request  = Request.decode(buffer);
  var response = new Response();
  var singleFiles = [], fileSet;
  response.file = [];


  request.proto_file.forEach(function(file){
    var f = new File();
    if(singleFile) {
      singleFiles.push(file);
    } else {
      f.name    = file.name.replace(/\.proto$/, '.json');
      f.content = JSON.stringify([file], null, 2);
      response.file.push(f);
    }
  });

  if(singleFiles.length) {
    var file = new File();
    file.name = singleFile;
    file.content = JSON.stringify(singleFiles);
    response.file = [file];
  }


  var result = response.encode().toBuffer();
  process.stdout.write(result);
});


process.stdin.resume();
