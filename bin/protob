#!/usr/bin/env node
var start = Date.now();
var Protofile = require('../lib/compiler/protofile').Protofile;
var Path = require('path');
var Glob = require('glob');
var exec = require('child_process').exec;
var fs   = require('fs');
var singleFile;
var Promise = require('bluebird');

var optimist = require('optimist')
  .usage("Usage: $0 [OPTIONS] [protofile, [protofile], [...]]")
  .options("o", {
    alias: "outdir",
    describe: "Output directory for compiled proto files",
    default: "./protos"
  })
  .options("h", {
    alias: "help",
    describe: "Show help message",
    default: false
  })
  .options("n", {
    alias: "node",
    describe: "Collect proto.json files from locally installed dependencies",
    default: true
  })
  .options("c", {
    alias: "cache",
    describe: "The cache for raw proto files",
    default: "./.proto_cache"
  })
  .options("e", {
    alias: "ignore-ext-collisions",
    default: false,
    describe: "Ignore any extension collisions detected"
  })
  .boolean("e")
  .boolean("h")
  .boolean("n")
  .options("f", {
    alias: "outfile",
    describe: "Output file for compiled protos"
  });

var argv = optimist.argv;

if( argv.help ) { optimist.showHelp(); process.exit(0); }

if( argv._.length == 0 && fs.existsSync("./protos.json")) Protofile.protoPaths.push("./protos.json");
for(var i=0; i < argv._.length; i++) { Protofile.protoPaths.push(Path.resolve(argv._[i].trim())); }

if( argv.node ) {
  var protos = Glob.sync("./node_modules/**/protos.json").filter(function(pth) { return !(/\/test\//.test(pth)); });
  for( var i=0; i<protos.length; i++){ Protofile.protoPaths.push(Path.resolve(protos[i])); }
}

if (argv.cache ) {
  Protofile.protoCache = argv.cache.trim();
}

if( argv.outfile ) {
  singleFile = argv.outfile.trim();
  process.env.SINGLE_FILE = singleFile;
}


if (Protofile.protoPaths.length == 0) {
  console.error("No protofiles found");
  process.exit(0);
} else {
  console.error("Fetching protofiles from:", Protofile.protoPaths);
}

if( argv.o ) Protofile.outputDir = argv.o.trim();

var protofile = new Protofile();

if( !fs.existsSync(Protofile.outputDir)){ fs.mkdirSync(Protofile.outputDir); }

var resolvePromise;
if(process.env.PROTOB_NO_FETCH) { 
  resolvePromise = Promise.resolve();
} else {
  resolvePromise = protofile.resolve();
}

resolvePromise.then( function(){
  var compileStart = Date.now(), finish;

  exec([Path.join(__dirname, "protob-collisions"), Protofile.protoCache].join(' '), function(collisionErr, stout, ster) {
    process.stderr.write(ster);
    if(collisionErr && !argv.e) {
      process.exit(1);
    }

    try{
    console.error("Resolved Protofiles");
    cmd = ["protoc"];
    cmd.push("--plugin=" + Path.join(__dirname, "protoc-gen-json"));
    cmd.push("--json_out=" + Protofile.outputDir);

    try{
      protofile.importPaths().forEach(function(path) {
        cmd.push("-I=" + Path.resolve(path));
      });

      protofile.files().forEach(function(file) { cmd.push(Path.resolve(file)); });
    } catch(e) {
      console.error(e);
    }

    exec( cmd.join(" "), function(error, stdout, stderr) {
      console.error(stderr);
      if( error ) {
        console.error(stderr);
      } else {
        console.error("Done. Took", (Date.now() - start)/1000, "s total (", (Date.now() - compileStart)/1000, "s compile time )" );
      }
    });

    } catch(e) { console.error("GOT AN ERROR", e); }
  });
}, function(err) {
  console.error("ERROR: ", err);
}).catch(function(err){ console.error("There was an error compiling protos", err); });
